import  Image from "next/image";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage } from "~/components/loading";
import { NextPage } from "next";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { data: sessionData } = useSession();

  if (!sessionData) return null;

  return (
    <>
      {sessionData.user.image && (
        <div className="flex gap-3 w-full font-medium">
          <Image
            src={sessionData.user.image}
            className="h-14 w-14 rounded-full"
            alt="Profile image"
            width={56}
            height={56}
          />
          <input placeholder="Type some emojis!" className="bg-transparent grow outline-none" />
        </div>
      )}
    </>
  );
};


type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  return (
    <>
      <div key={props.id} className="flex border-b border-slate-400 p-4 items-center gap-3">
        <Image
          src={props.author.image!}
          className="h-14 w-14 rounded-full"
          alt={`@{props.author.name}'s profile picture`}
          width={56}
          height={56}
        />
        <div className="flex flex-col">
          <div className="flex text-slate-300 gap-1">
            <span>{`@${props.author.name}`}</span> Â· <span>{dayjs(props.createdAt).fromNow()}</span>
          </div>
          <span className="text-2xl">{props.content}</span>
        </div>
      </div>
    </>
  );
};

const Feed = () => {
  const { data: postsData, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;
  if (!postsData) return <div>Something went wrong</div>;
  
  return (
    <div className="flex flex-col">
      {postsData?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.id} />
      ))}
    </div>
  );
}

const Home: NextPage = () => {
  const { status: sessionStatus } = useSession();

  // Return empty div if BOTH aren't loaded, since session tends to load faster
  if (sessionStatus === "loading")  return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {(sessionStatus !== "authenticated") && (
              <button
                className="flex justify-center"
                onClick={() => void signIn()}
              >
                "Sign in"
              </button>
            )}

            {(sessionStatus === "authenticated") && <CreatePostWizard />}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
}

export default Home;
